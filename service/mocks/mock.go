// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	responses "avito_go/responses"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockSendCoin is a mock of SendCoin interface.
type MockSendCoin struct {
	ctrl     *gomock.Controller
	recorder *MockSendCoinMockRecorder
}

// MockSendCoinMockRecorder is the mock recorder for MockSendCoin.
type MockSendCoinMockRecorder struct {
	mock *MockSendCoin
}

// NewMockSendCoin creates a new mock instance.
func NewMockSendCoin(ctrl *gomock.Controller) *MockSendCoin {
	mock := &MockSendCoin{ctrl: ctrl}
	mock.recorder = &MockSendCoinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendCoin) EXPECT() *MockSendCoinMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendCoin) Send(userId int, toUser string, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", userId, toUser, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSendCoinMockRecorder) Send(userId, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendCoin)(nil).Send), userId, toUser, amount)
}

// MockBuyItem is a mock of BuyItem interface.
type MockBuyItem struct {
	ctrl     *gomock.Controller
	recorder *MockBuyItemMockRecorder
}

// MockBuyItemMockRecorder is the mock recorder for MockBuyItem.
type MockBuyItemMockRecorder struct {
	mock *MockBuyItem
}

// NewMockBuyItem creates a new mock instance.
func NewMockBuyItem(ctrl *gomock.Controller) *MockBuyItem {
	mock := &MockBuyItem{ctrl: ctrl}
	mock.recorder = &MockBuyItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuyItem) EXPECT() *MockBuyItemMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockBuyItem) Buy(userId int, item string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", userId, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buy indicates an expected call of Buy.
func (mr *MockBuyItemMockRecorder) Buy(userId, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockBuyItem)(nil).Buy), userId, item)
}

// MockInformation is a mock of Information interface.
type MockInformation struct {
	ctrl     *gomock.Controller
	recorder *MockInformationMockRecorder
}

// MockInformationMockRecorder is the mock recorder for MockInformation.
type MockInformationMockRecorder struct {
	mock *MockInformation
}

// NewMockInformation creates a new mock instance.
func NewMockInformation(ctrl *gomock.Controller) *MockInformation {
	mock := &MockInformation{ctrl: ctrl}
	mock.recorder = &MockInformationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformation) EXPECT() *MockInformationMockRecorder {
	return m.recorder
}

// GetInformation mocks base method.
func (m *MockInformation) GetInformation(userId int) ([]responses.Transaction, []responses.Transaction, []responses.InventoryItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformation", userId)
	ret0, _ := ret[0].([]responses.Transaction)
	ret1, _ := ret[1].([]responses.Transaction)
	ret2, _ := ret[2].([]responses.InventoryItem)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetInformation indicates an expected call of GetInformation.
func (mr *MockInformationMockRecorder) GetInformation(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformation", reflect.TypeOf((*MockInformation)(nil).GetInformation), userId)
}
